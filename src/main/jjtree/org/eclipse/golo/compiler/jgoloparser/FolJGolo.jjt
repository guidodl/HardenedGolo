/*
    First order logic parser, for J-Golo specifications.
    Initialy inspired by Fol parser :
        https://github.com/rindPHI/FirstOrderParser
    Official WhyML Parser :
        https://github.com/jpdeplaix/why3/blob/master/src/parser/lexer.mll
        https://github.com/jpdeplaix/why3/blob/master/src/parser/parser.mly
*/

// =====> How to correctly cite the source (original Copyright below)
/* Copyright 2014 Dominic Scheurer
 *
 * This file is part of FirstOrderParser.
 *
 * FirstOrderParser is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * FirstOrderParser is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with FirstOrderParser.  If not, see <http://www.gnu.org/licenses/>.
 */

options
{
	LOOKAHEAD = 1;
	JDK_VERSION = "1.6";
	static = false;
}

PARSER_BEGIN(FolJGoloParser)
package org.eclipse.golo.compiler.jgoloparser;

import java.io.StringReader;
import java.util.ArrayList;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.eclipse.golo.compiler.jgoloparser.visitor.*;


/**
 * <p>
 * Parser for formulas of the language of first-order (predicate)
 * logic. The suggested method to start with is {@link #parse(String)}.
 * </p>
 *
 * <p>
 * Original Syntax: Variables start with upper letters, functions and predicates
 * with lower letters. Digits and underscores in identifiers are allowed.
 * The binary operators "&", "|", "->" must be put in parentheses; parentheses
 * in other places are not allowed. The negation operator is "!", the
 * universal quantifier is "forall", the existential quantifier is "exists".
 * Whitespace is ignored.
 * </p>
 *
 * <p>
 *  WhyML changes :
 *   + & -> /\
 *   + | -> \/
 * </p>
 *
 * <p>
 * <pre>
 * term  ::= var | fun | fun terms
 * terms ::= "(" term ")" | "(" term "," terms ")" !! Problème parentheses inclues dans la récursion
 * form  ::=   pred
 *           | pred terms
 *           | "!" form
 *           | "(" form "/\" form ")"
 *           | "(" form "\/" form ")"
 *           | "(" form "->" form ")"
 *           | "exists " var "." form
 *           | "forall " var "." form
 *
 * spec ::=   ensures "{" form "}"
 *          | requires "{" form "}"
 *          | invariant "{" form "}"
 *          | variant "{" form "}"
 *
 * specs ::= spec | spec specs
 * </pre>


 * Objective grammar :
 * <pre>

 * term   ::= "(" form ")"
 *           | id ( id | literal ) * // includes variables and preidcates
 *           | literal

 * mult   ::=  term "*" mult
 *           | term "/" mult
 *           | term "%" mult
 *           | term

 * arith  ::=  mult "+" arith
 *           | mult "-" arith
 *           | mult

 * comp   ::=  arith "<"  arith
 *           | arith "<=" arith
 *           | arith ">"  arith
 *           | arith ">=" arith
 *           | arith "="  arith
 *           | arith "<>" arith
 *           | arith   // no distinction according to the type in the grammar.


 * decl   ::=  var ":" type {"," var ":" type }*

 * clause ::=  comp
 *           | "not" form
 *           | "exists " decl "." "(" form ")"
 *           | "forall " decl "." "(" form ")"


 * form   ::=  clause "->"  form  // !! has to be more prioritized.
 *           | clause "<->" form  // !! has to be more prioritized.
 *           | clause "/\"  form
 *           | clause "\/"  form
 *           | clause


 * spec   ::=  ensures "{" form "}"
 *           | requires "{" form "}"
 *           | invariant "{" form "}"
 *           | variant "{" form "}"
 *
 * specs ::= spec | spec specs
 * </pre>

 * </p>

 DONE : no distinction between variables and fun through first letter capitalisation
 DONE : Rules are right recursive only ...
 DONE : Function are without parenthesis (check the no parameter case)
 DONE : add arithmetics
 DONE : check if JGTerm, JGAtomic, JGPredicate and JGAtomicArtich are all needs
 TODO : check unused Java Types and parser rules
 TODO : authorizes interval (1 < x <12)
 TODO : Add a type attribute into primitives (boolean vs int vs float) and propagates to parent nodes. Make parser crashes if incompatible types found.
 TODO : add internal why functions (nth, Some, list, Array ...)
 TODO : add internal why types (int, int32, ...)
 TODO : ...
 *
 * @author Dominic Scheurer
 * @author Nicolas Stouls
 */
public class FolJGoloParser
{
    /**
     * Parses a given formula.
     *
     * @param formula JGFormula to parse.
     * @return Parsed formula object.
     * @throws ParseException if an error occurs during parsing.
     */
    public static JGSpecs parse(String formula) throws ParseException
    {
        FolJGoloParser parser =
        		new FolJGoloParser(new StringReader(formula));
        return parser.parse();
    }
}
PARSER_END(FolJGoloParser)

SKIP :
{
 	" "
|	"\t"
|	"\r"
|	"\n"
|	"\f"
}

/* removed : | < VARIABLE: < UPPER > (< INNER >)* > */
TOKEN :
{
	< OPEN: "(" >
|	< CLOSE: ")" >
|	< COMMA: "," >
|	< DOT: "." >
| < COLON: ":" >
|	< NEG: "!" >
|	< CONJ: "/\\" >
|	< DISJ: "\\/" >
|	< IMP: "->" >
|	< ALL: "forall" >
|	< EXIST: "exists" >

| < SPECTITLE: < ENSURES > | < REQUIRES > | < INVARIANT > | < VARIANT > >

|   < #ENSURES: "ensures" >
|   < #REQUIRES: "requires" >
|   < #INVARIANT: "invariant" >
|   < #VARIANT: "variant" >
}



// Operators
TOKEN :
{
  < COMPOP: < LTOP > | <LEOP> | <GTOP> | <GEOP> | <DIFFOP> | <EQOP>  >

|   < #LTOP: "<" >
|   < #LEOP: "<=" >
|   < #GTOP: ">" >
|   < #GEOP: ">=" >
|   < #DIFFOP: "<>" >
|   < #EQOP: "=" >


| < ADDSOP: < ADDOP > | <MINUSOP>  >

|   < #ADDOP: "+" >
|   < #MINUSOP: "-" >


| < MULTSOP: < MULTOP > | <DIVOP> | <MODOP>  >

|   < #MULTOP: "*" >
|   < #DIVOP: "/" >
|   < #MODOP: "%" >

}


// Literals
TOKEN :
{
  < NUMBER: (<ADDSOP>)? ["0"-"9"] (("_")? ["0"-"9"])* >   // !!!! Pb de lecture des entiers négatifs dans une expression
| < LONG_NUMBER: <NUMBER> "_L" >
| < BIGINTEGER: <NUMBER> "_B" >
| < FLOATING_NUMBER: <NUMBER> ("." ["0"-"9"] (("_")? ["0"-"9"])*)? ("e" ("-")? (["0"-"9"])+)? >
| < FLOAT: <FLOATING_NUMBER> "_F" >
| < BIGDECIMAL: <FLOATING_NUMBER> "_B" >
| < STRING: "\"" (
    (~["\"", "\\", "\n", "\r"])
    |
    ("\\"
      (["n", "t", "b", "r", "f", "\\", "\"", "\'"])
      |
      ( "u"
        (["0"-"9"]|["a"-"f"])
        (["0"-"9"]|["a"-"f"])
        (["0"-"9"]|["a"-"f"])
        (["0"-"9"]|["a"-"f"])
      )
    )
  )* "\"" >
| < CHAR: "'" (
    (~["\'", "\\", "\n", "\r"])
    |
    ("\\"
      (["n", "t", "b", "r", "f", "\\", "\"", "\'"])
      |
      ( "u"
        (["0"-"9"]|["a"-"f"])
        (["0"-"9"]|["a"-"f"])
        (["0"-"9"]|["a"-"f"])
        (["0"-"9"]|["a"-"f"])
      )
    )
  ) "'" >
| < NULL: "null" >
| < TRUE: "true" >
| < FALSE: "false" >
}


TOKEN :
{
  < ID: (< LOWER > | <UPPER> | <UNDER> ) (< INNER >)* >

|   < #INNER: (<UPPER> | <UNDER> | <LOWER> | <DIGIT>) >
|   < #DIGIT: ["0" - "9"] >
|   < #LOWER: ["a" - "z"] >
|   < #UPPER: ["A" - "Z"] >
|   < #UNDER: "_"  >

}


JGSpecs parse() :
{
    JGSpecs specs;
}
{
    specs = specs()
    < EOF >
    {
        return specs;
    }
}


/*
 * specs ::= spec | spec specs
 */
JGSpecs specs() :
{
    JGSpecs specs = new JGSpecs();
    JGSpec spec;
}
{
    (
        spec = spec()
        {
          specs.add(spec);
        }
    )+
    {
        return specs;
    }
}


/*
 * spec   ::=  ensures   "{" form "}"
 *           | requires  "{" form "}"
 *           | invariant "{" form "}"
 *           | variant   "{" form "}"
 */
JGSpec spec() :
{
    JGFormula form;
    String specType;
}
{

    < SPECTITLE >
    {
        specType=token.image;
    }
    "{"
    form=formula()
    "}"
    {
        return new JGSpec(specType, form);
    }
}


/*
 * form   ::=  clause "->"  form  // !! has to be more prioritized.
 *           | clause "<->" form  // !! has to be more prioritized. //TODO logical equivalence doesn't support now
 *           | clause "/\"  form
 *           | clause "\/"  form
 *           | clause
 */
JGFormula formula() :
{
    String symbol;
    JGFormula left, right;
}
{
  left = clause()
	(
      < IMP >
      {
          symbol = token.image;
      }
      right = formula()
      {
          return new JGBinary(left, "->", right);
      }

    | < DISJ >
      {
          symbol = token.image;
      }
      right = formula()
      {
          return new JGBinary(left, "\\/", right);
      }

    | < CONJ >
      {
            symbol = token.image;
      }
      right = formula()
      {
          return new JGBinary(left, "/\\", right);
      }

    |
    {
      return left;
    }
	)
}


/*
 * clause ::=  comp        // includes inlined predicate
 *           | "not" form
 *           | "exists " decl "." "(" form ")"
 *           | "forall " decl "." "(" form ")"
 */
JGFormula clause() :
{
    JGFormula form;
}
{
	(
	    form = negated()     |
	    form = existential() |
	    form = universal()   |
	    form = comparison()
	)
	{
		return form;
	}
}


JGQuantifier existential() :
{
    String symbol;
    JGFormula inner;
    JGTerm qfdVar;
    JGTerm type;
}
{
	< EXIST >
	{
	    symbol = token.image;
	}
	< ID >
	{
	    qfdVar = new JGTerm(token.image);
	}
	< COLON >
	< ID >
	{
	    type = new JGTerm(token.image);
	}
	< DOT >
	< OPEN >
	inner = formula()
	< CLOSE >
	{
	    return new JGQuantifier(symbol, qfdVar, type, inner);
	}
}


JGQuantifier universal() :
{
    String symbol;
    JGFormula inner;
    JGTerm qfdVar;
    JGTerm type;
}
{
	< ALL >
	{
	    symbol = token.image;
	}
	< ID >
	{
	    qfdVar = new JGTerm(token.image);
	}
	< COLON >
  < ID >
  {
      type = new JGTerm(token.image);
  }
	< DOT >
	< OPEN >
	inner = formula()
	< CLOSE >
	{
	    return new JGQuantifier(symbol, qfdVar, type, inner);
	}
}


JGUnary negated() :
{
    String symbol;
    JGFormula inner;
}
{
	< NEG >
	{
	    symbol = token.image;
	}
	inner = formula()
	{
	    return new JGUnary(symbol, inner);
	}
}


/*
 * comp   ::=  arith "<"  arith
 *           | arith "<=" arith
 *           | arith ">"  arith
 *           | arith ">=" arith
 *           | arith "="  arith
 *           | arith "<>" arith
 *           | arith   // no distinction according to the type in the grammar.
 */
JGFormula comparison() :
{
    JGFormula left, right;
    String symbol;
    Token token = null;
}
{
  left = arith()
  (
      token=<COMPOP> right=arith()
      {
        symbol = token.image;
        return new JGBinary(left, symbol, right);
      }
    |
      {
        return left;
      }
  )
}


/*
 * arith  ::=  mult "+" arith
 *           | mult "-" arith
 *           | mult
 */
JGFormula arith() :
{
  JGFormula left, right;
  String symbol;
}
{
  left = mult()
  (
    < ADDSOP >
    {
      symbol = token.image;
    }
    right = arith()
    {
      return new JGBinary(left, symbol, right);
    }
  |
    {
      return left;
    }
  )
}


/*
 * mult   ::=  term "*" mult
 *           | term "/" mult
 *           | term "%" mult
 *           | term
 */
JGFormula mult() :
{
  JGFormula left, right;
  String symbol;
}
{
    left = term()
    (
      < MULTSOP >
      {
        symbol = token.image;
      }
      right = mult()
      {
        return new JGBinary(left, symbol, right);
      }
    |
      {
        return left;
      }
  )
}


/*
 * term   ::=  (+ | -)? "(" form ")"
 *           | (+ | -)? id ( id | literal | "(" form ")" ) * // includes variables and predicates
 *           | (+ | -)? literal
 */
JGFormula term() :
{
    String name;
    ArrayList<JGFormula> arguments = new ArrayList<JGFormula>();
    JGFormula inner;
    JGLiteral lit;
    Token sign = null;
}
{
    (
      sign = < ADDSOP >
    ) ?
    (
        < OPEN >
        inner = formula()
        < CLOSE >
        {
            return sign != null && sign.toString().trim().equals("-") ? new JGUnary("-", inner) : inner;
        }

    |   < ID >
        {
          name = token.image;
        }
        (
            < ID >
            {
              arguments.add(new JGTerm(token.image));
            }

          |   lit = Literal()
              {
                  arguments.add(lit);
              }

          |   < OPEN >
              inner = formula()
              < CLOSE >
              {
                 arguments.add(inner);
              }
        )*
        {
          JGFormula term = arguments.isEmpty() ? new JGTerm(name) : new JGFunction(name, arguments);
          return sign != null && sign.toString().trim().equals("-") ? new JGUnary("-", term) : term;
        }

    |   lit = Literal()
        {
          return sign != null && sign.toString().trim().equals("-") ? new JGUnary("-", new JGTerm(lit))
                                                                    : new JGTerm(lit);
        }
    )
}


JGLiteral Literal():
{
  Object value;
}
{
  (
      value=BigDecimalLiteral()
    | value=BigIntegerLiteral()
    | value=FloatLiteral()
    | value=DoubleLiteral()
    | value=LongLiteral()
    | value=IntegerLiteral()
    | <NULL>
      {
         value=null;
      }
    | <TRUE>
      {
         value=Boolean.TRUE;
      }
    | <FALSE>
      {
         value=Boolean.FALSE;
      }
  )
  {
    return new JGLiteral(value);
  }
}





Long LongLiteral() :
{
  Token literal;
}
{
  literal=<LONG_NUMBER>
  {
    String image = literal.image.substring(0, literal.image.length() - 2);
    return Long.valueOf(image.replace("_",""));
  }
}

BigInteger BigIntegerLiteral():
{
  Token literal;
}
{
  literal=<BIGINTEGER>
  {
    String image = literal.image.substring(0, literal.image.length() - 2);
    return new BigInteger(image.replace("_",""));
  }
}


Integer IntegerLiteral():
{
  Token literal;
}
{
  literal=<NUMBER>
  {
    String image = literal.image.replace("_","");
    return Integer.valueOf(image);
  }
}

Double DoubleLiteral() :
{
  Token literal;
}
{
  literal=<FLOATING_NUMBER>
  {
    return Double.valueOf(literal.image.replace("_", ""));
  }
}

Float FloatLiteral() :
{
  Token literal;
}
{
  literal=<FLOAT>
  {
    return Float.valueOf(literal.image
        .substring(0, literal.image.length() - 2)
        .replace("_", ""));
  }
}

BigDecimal BigDecimalLiteral() :
{
  Token literal;
}
{
  literal=<BIGDECIMAL>
  {
    return new BigDecimal(literal.image
        .substring(0, literal.image.length() - 2)
        .replace("_", ""));
  }
}








